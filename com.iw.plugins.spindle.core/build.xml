<?xml version="1.0" encoding="UTF-8"?>
<project name="com.iw.plugins.spindle.core" default="build.jars" basedir=".">

	<property name="bootclasspath" value=""/>
	<property name="basews" value="${ws}"/>
	<property name="baseos" value="${os}"/>
	<property name="basearch" value="${arch}"/>
	<property name="basenl" value="${nl}"/>
	<property name="javacFailOnError" value="false"/>
	<property name="javacDebugInfo" value="on"/>
	<property name="javacVerbose" value="true"/>
	<property name="javacSource" value="1.3"/>
	<property name="javacTarget" value="1.1"/>

	<target name="init" depends="properties">
		<property name="temp.folder" value="${basedir}/temp.folder"/>
		<property name="plugin.destination" value="${basedir}"/>
		<property name="build.result.folder" value="${basedir}"/>
	</target>

	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
	</target>

	<target name="build.update.jar" depends="init" description="Build the plug-in: com.iw.plugins.spindle.core for an update site.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<zip zipfile="${plugin.destination}/com.iw.plugins.spindle.core_0.0.1.jar" basedir="${temp.folder}/com.iw.plugins.spindle.core_0.0.1" filesonly="false"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="gather.bin.parts" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/com.iw.plugins.spindle.core_0.0.1"/>
		<copy todir="${destination.temp.folder}/com.iw.plugins.spindle.core_0.0.1">
			<fileset dir="${build.result.folder}" includes="plugin.xml,LICENSE*"			/>
		</copy>
		<copy todir="${destination.temp.folder}/com.iw.plugins.spindle.core_0.0.1">
			<fileset dir="${basedir}" includes="plugin.xml,LICENSE*"			/>
		</copy>
	</target>

	<target name="core.jar" depends="init" unless="core.jar" description="Create jar: core.jar.">
		<delete dir="${temp.folder}/core.jar.bin"/>
		<mkdir dir="${temp.folder}/core.jar.bin"/>
		<!-- compile the source code -->
		<javac destdir="${temp.folder}/core.jar.bin" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bootclasspath}" classpath="../../plugins/org.eclipse.core.boot_3.0.0/bin;../../plugins/org.eclipse.core.boot_3.0.0/boot.jar;commons-digester-1.4.jar;commons-logging-1.0.2.jar;commons-beanutils-1.6.1.jar;commons-collections-2.1.jar;commons-fileupload-1.0.jar;commons-lang-1.0.jar;jakarta-oro-2.0.6.jar;javassist-2.5.1.jar;javax.servlet.jar;ognl-2.5.1.jar;tapestry-3.0-beta-2.jar;tapestry-contrib-3.0-beta-2.jar;bsf-2.3.0.jar;bin;dtdparser.jar;../../plugins/org.eclipse.core.runtime_3.0.0/bin;../../plugins/org.eclipse.core.runtime_3.0.0/runtime.jar;../../plugins/org.apache.xerces_4.0.13/bin;../../plugins/org.apache.xerces_4.0.13/xmlParserAPIs.jar;../../plugins/org.apache.xerces_4.0.13/xercesImpl.jar" source="${javacSource}" target="${javacTarget}"		>
			<src path="src/"			/>
		</javac>
		<!-- copy necessary resources -->
		<copy todir="${temp.folder}/core.jar.bin">
			<fileset dir="src/" excludes="**/*.java"			/>
		</copy>
		<mkdir dir="${build.result.folder}"/>
		<jar jarfile="${build.result.folder}/core.jar" basedir="${temp.folder}/core.jar.bin"/>
		<delete dir="${temp.folder}/core.jar.bin"/>
	</target>

	<target name="coresrc.zip" depends="init" unless="coresrc.zip">
		<mkdir dir="${build.result.folder}"/>
		<zip zipfile="${build.result.folder}/coresrc.zip" filesonly="false">
			<fileset dir="src/" includes="**/*.java"			/>
		</zip>
	</target>

	<target name="dtdparser.jar" depends="init" unless="dtdparser.jar" description="Create jar: dtdparser.jar.">
		<delete dir="${temp.folder}/dtdparser.jar.bin"/>
		<mkdir dir="${temp.folder}/dtdparser.jar.bin"/>
		<!-- compile the source code -->
		<javac destdir="${temp.folder}/dtdparser.jar.bin" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bootclasspath}" classpath="../../plugins/org.eclipse.core.boot_3.0.0/bin;../../plugins/org.eclipse.core.boot_3.0.0/boot.jar;bin;core.jar;commons-digester-1.4.jar;commons-logging-1.0.2.jar;commons-beanutils-1.6.1.jar;commons-collections-2.1.jar;commons-fileupload-1.0.jar;commons-lang-1.0.jar;jakarta-oro-2.0.6.jar;javassist-2.5.1.jar;javax.servlet.jar;ognl-2.5.1.jar;tapestry-3.0-beta-2.jar;tapestry-contrib-3.0-beta-2.jar;bsf-2.3.0.jar;../../plugins/org.eclipse.core.runtime_3.0.0/bin;../../plugins/org.eclipse.core.runtime_3.0.0/runtime.jar;../../plugins/org.apache.xerces_4.0.13/bin;../../plugins/org.apache.xerces_4.0.13/xmlParserAPIs.jar;../../plugins/org.apache.xerces_4.0.13/xercesImpl.jar" source="${javacSource}" target="${javacTarget}"		>
			<src path="dtdparser/"			/>
		</javac>
		<!-- copy necessary resources -->
		<copy todir="${temp.folder}/dtdparser.jar.bin">
			<fileset dir="dtdparser/" excludes="**/*.java"			/>
		</copy>
		<mkdir dir="${build.result.folder}"/>
		<jar jarfile="${build.result.folder}/dtdparser.jar" basedir="${temp.folder}/dtdparser.jar.bin"/>
		<delete dir="${temp.folder}/dtdparser.jar.bin"/>
	</target>

	<target name="dtdparsersrc.zip" depends="init" unless="dtdparsersrc.zip">
		<mkdir dir="${build.result.folder}"/>
		<zip zipfile="${build.result.folder}/dtdparsersrc.zip" filesonly="false">
			<fileset dir="dtdparser/" includes="**/*.java"			/>
		</zip>
	</target>

	<target name="build.jars" depends="init" description="Build all the jars for the plug-in: com.iw.plugins.spindle.core.">
		<available property="core.jar" file="${build.result.folder}/core.jar"/>
		<antcall target="core.jar"/>
		<available property="dtdparser.jar" file="${build.result.folder}/dtdparser.jar"/>
		<antcall target="dtdparser.jar"/>
	</target>

	<target name="build.sources" depends="init">
		<available property="coresrc.zip" file="${build.result.folder}/coresrc.zip"/>
		<antcall target="coresrc.zip"/>
		<available property="dtdparsersrc.zip" file="${build.result.folder}/dtdparsersrc.zip"/>
		<antcall target="dtdparsersrc.zip"/>
	</target>

	<target name="build.zips" depends="init">
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/com.iw.plugins.spindle.core_0.0.1"/>
		<copy file="${build.result.folder}/dtdparsersrc.zip" todir="${destination.temp.folder}/com.iw.plugins.spindle.core_0.0.1"/>
		<copy file="${build.result.folder}/coresrc.zip" todir="${destination.temp.folder}/com.iw.plugins.spindle.core_0.0.1"/>
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/com.iw.plugins.spindle.core_0.0.1"/>
		<copy file="${temp.folder}/dtdparser.jar.bin.log" todir="${destination.temp.folder}/com.iw.plugins.spindle.core_0.0.1"/>
		<copy file="${temp.folder}/core.jar.bin.log" todir="${destination.temp.folder}/com.iw.plugins.spindle.core_0.0.1"/>
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: com.iw.plugins.spindle.core of all the zips, jars and logs created.">
		<delete file="${build.result.folder}/dtdparser.jar"/>
		<delete file="${build.result.folder}/dtdparsersrc.zip"/>
		<delete file="${build.result.folder}/core.jar"/>
		<delete file="${build.result.folder}/coresrc.zip"/>
		<delete file="${plugin.destination}/com.iw.plugins.spindle.core_0.0.1.jar"/>
		<delete file="${plugin.destination}/com.iw.plugins.spindle.core_0.0.1.zip"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
		<eclipse.convertPath fileSystemPath="X:/test/3/eclipse/workspace/com.iw.plugins.spindle.core/" property="resourcePath"/>
		<eclipse.refreshLocal resource="com.iw.plugins.spindle.core" depth="infinite"/>
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: com.iw.plugins.spindle.core.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="build.sources"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<delete>
			<fileset dir="${temp.folder}" includes="**/*.bin.log"			/>
		</delete>
		<zip zipfile="${plugin.destination}/com.iw.plugins.spindle.core_0.0.1.zip" basedir="${temp.folder}" filesonly="true"/>
		<delete dir="${temp.folder}"/>
	</target>

</project>
