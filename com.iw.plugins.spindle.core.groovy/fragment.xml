<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.0"?>
<fragment
   id="com.iw.plugins.spindle.core.groovy"
   name="Groovy Support Fragment"
   version="3.2.12"
   provider-name="Intellgent Works Incorporated"
   plugin-id="com.iw.plugins.spindle.core"
   plugin-version="3.2.12"
   match="perfect">

   <runtime>
      <library name="groovy.jar"/>
   </runtime>
   
   <!--
    	A resolver that locates the Groovy file for a page or component spec.
    	
    	When Spindle encounters a "class" attribute in a <page-specification> or
    	<component-specification> element the following occurs:
    	
    	1. resolve the classname to an Eclipse JDT IType instance.
    	   if the resolve fails for any reason, stop, mark error,
    	   show dialog, etc depending on the context.
    	   
        2. iterate over all the classes contributed to this extension point
           and ask the question: can you resolve this type to something else?
           The first one that says yes, wins. In none say yes, stop.
           
        3. ask the winner in #2 to resolve the IType to another file;
           in this case a groovy file. An status instance is returned.
           The status instance has a severity (like, OK, ERROR, WARNING)
           If the status returned is anything but OK, stop, mark, dialog,
           whatever, using the message property of the status to inform user.
           
        4. This is optional. Some parts of Spindle do it, some don't but it will
           never be called if Step #3 didn't result in an OK status. 
           If Spindle does do this step, it will call the winner and ask for
           the resource that was found in step #3.
           
   -->
   <extension
         point="com.iw.plugins.spindle.core.componentTypeResolver">
      <resolver
            class="com.iw.plugins.spindle.core.groovy.ComponentTypeResolver"
            name="Grovestry Component Type Resolver"
            id="com.iw.plugins.spindle.core.groovy.resolvers.componentType"/>
   </extension>
   <!--
      This is a temporary extension point that allows you to veto an incremental build
      under certain circumstances
      
      This is useful because Spindle doesn't index (yet) file dependencies so when
      a groovy file changes so the incremental builder can't tell that a Tapestry spec 
      depends on a groovy file and thus no build occurs.
      
      So we give the option of vetoing an incremental build if files with the given extension
      have changed (create/delete/move/rename only). When an incremental build is veto'd a full build will occur instead.
      
      When file dependencies are properly indexed the need for this extension point will go
      away and an contributions will just be ignored.
   -->
   <extension
         point="com.iw.plugins.spindle.core.incrementalBuildVeto">
      <veto
            extension="groovy"
            name="Groovy File Veto"
            id="com.iw.plugins.spindle.core.groovy.veto"/>
   </extension>
   <extension
         point="com.iw.plugins.spindle.core.beanSpecificationValidators">
      <validator
            class="com.iw.plugins.spindle.core.groovy.ScriptBeanValidator"
            name="Groovestry Script Bean Validator"
            id="com.iw.plugins.spindle.core.groovy.scriptBean"/>
   </extension>

</fragment>
